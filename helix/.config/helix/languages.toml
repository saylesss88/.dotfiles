[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
auto-format = true
formatter = {command = "rustfmt"}
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
	{start = "/*", end = "*/"},
	{start = "/**", end = "*/"},
	{start = "/*!", end = "*/"},
]
language-servers = ["rust-analyzer", "scls"] #, "gpt"]
indent = {tab-width = 4, unit = "    "}
persistent-diagnostic-sources = ["rustc", "clippy"]

[language-server.rust-analyzer.config]
check.command = "clippy"
check.features = "all"
check.always = true
cargo.toolchain = "nightly"
cargo.buildScripts.rebuildOnSave = true
cargo.buildScripts.enable = true
cargo.autoreload = true
cargo.procMacro.enable = true
cargo.procMacro.ignored.leptos_macro = ["server", "component"]
cargo.diagnostics.disabled = ["unresolved-proc-macro"]
cargo.allFeatures = true

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'

[language.debugger]
command = "codelldb"
name = "codelldb"
port-arg = "--port {}"
transport = "tcp"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [{name = "binary", completion = "filename"}]
args = {program = "{0}"}

[[language.debugger.templates]]
name = "binary (terminal)"
request = "launch"
completion = [{name = "binary", completion = "filename"}]
args = {program = "{0}", runInTerminal = true}

[[language.debugger.templates]]
name = "attach"
request = "attach"
completion = ["pid"]
args = {pid = "{0}"}


[language-server.rust-analyzer]
timeout = 120

# [[grammar]]
# name = "rust"
# source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "9c84af007b0f144954adb26b3f336495cbb320a7" }


# introduce new language server
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = true                 # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "git-commit"
language-servers = ["scls"]

[[language]]
name = "markdown"
# formatter = {command = "prettierd", args = ["--parser", "md"]}
language-servers = ["marksman", "markdown-oxide", "scls"]
formatter = {command = "dprint", args = ["fmt", "--stdin", "md"]}
text-width = 80
# comment-tokens = ["-", "+", "*", "- [ ]", ">"]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
# introduce a new language to enable completion on any doc by forcing set language with :set-language stub
[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = ["scls"]

[[language]]
name = "json"
formatter = {command = "prettierd", args = ["--parser", "json"]}

[[language]]
name = "yaml"
formatter = {command = "prettierd", args = ["--parser", "yaml"]}

[[language]]
name = "toml"
auto-format = true
language-servers = ["taplo"]
formatter = {command = "taplo", args = [
	"fmt",
	"--option",
	"indent_string=\t",
	"--option",
	"compact_inline_tables=true",
	"-",
]}

[language-server.taplo.config]
# Workaround for nonsense of being nonfunctional outside git directories
# (https://github.com/helix-editor/helix/issues/3897#issuecomment-2361674437)
root_dir = [".git", "*.toml"]

[[language]]
name = "nu"
auto-format = true
formatter = {command = "topiary", args = ["format", "--language", "nu"]}

[[language]]
name = "fish"
language-servers = ["fish-lsp"]
indent = {tab-width = 4, unit = "\t"}
# fish_indent does not use tabs, so we fix it that way
formatter = {command = "dash", args = ["-c", "fish_indent | sed 's/    /\t/g'"]}
[language-server.fish-lsp]
command = "fish-lsp"
args = ["start"]
environment = {"fish_lsp_show_client_popups" = "false"}
